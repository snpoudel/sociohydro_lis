}
POT_S_Scaled = POT_S/POT_S_max
POT_R_Scaled = POT_R/POT_R_max
for (t in 1:length(W))
{
POT[t] = max(POT_S_Scaled[t],POT_R_Scaled[t])
}
#sociohydro loop
for (t in 2:length(W))
{
#Relative loss
if( POT[t] > 0)
{R[t] = max(0,Rmax - Br*exp(-alphar*(Pmax - P[t-1])*POT[t]))}
else
{R[t] = 0}
L[t] = R[t] * D[t-1] * UP[t-1] #housing
dDdt[t] = U[t]*(1 - alphad*A[t-1])*D[t-1]*(1 - D[t-1]/Dmax)
dAdt[t] = alphaa*L[t]*(1 - A[t-1]/Amax) - mewa*A[t-1]
if (R[t] > 0)
{dPdt[t] = alphap*dAdt[t]*(1 - P[t-1]/Pmax) - mewp*P[t-1]
tflood = 0}
else
{dPdt[t] = -1*mewp*P[t-1]}
#housing
dUPdt[t] = HP[t]*(1 - UP[t-1]/UPmax)
if (R[t] > 0)
{HP[t] = HPmax/(HPmax + exp(-phi*(tflood-6)))}
#{dHPdt[t] = mewhp * HP[t-1] - alphahp * L[t] * (1 - HP[t-1]/HPmax)}
else
{
#dHPdt[t] = mewhp * HP[t-1]
HP[t] = HP[t-1] - alphahp*L[t]*(1 - HP[t]/HPmax)
}
tflood = tflood + 1
D[t] = max(0,min(D[t-1] + dDdt[t],Dmax))
A[t] = max(0,min(A[t-1] + dAdt[t],Amax))
P[t] = max(0,min(P[t-1] + dPdt[t],Pmax))
#housing
UP[t] = max(0,min(UP[t-1] + dUPdt[t],UPmax))
#HP[t] = max(0,min(HP[t-1] + dHPdt[t],HPmax))
}
SocHydResults<-data.frame(W,L,D,R,U,A,P,UP,HP)  #housing
return(SocHydResults)
}
#Socio-hydrological model test
Results = SocHydModel_SurgePrecip(W = Battery$Max_Wl_Battery, Precip = precip$precip_max,
2, 0.12, 6, 13, 9, 0.03,	0.012, 0.001,	0.01,
1, 1, 1, 1, 0.5 ,0.14, 0.1, 13, 0.012 , 1, 1)
setwd("C:/SANDEEP/SocioHydro_Model/Data")
Battery = read.csv("Max_Water_Level_Battery.csv")
precip = read.table("Max_precip_LIS.csv")
SocHydModel_SurgePrecip <- function(
W,             #annual maxima discharge
Precip,        #annual maxima rainfall
Surgethreshold = 2,      #flooding threshold (storm surge)
Rainthreshold = 0.1, #flooding threshold (precipitation)
alphad = 1,    #risk taking attitude
alphaa = 15,   #anxiousness
alphap = 1,    #activeness
alphar = 0.25, #effectiveness of preparedness
Br = 1,        #flood to loss
mewa = 0.10,   #forgetfullness
mewp = 0.04,   #decay rate of precautionary measures
Dmax = 1.0,    #maximum settlement density
Pmax = 1.0,    #maximum preparedness
Rmax = 1.0,    #maximum relative loss
Amax = 1.0,    #maximum awareness
U_rate = 0.5,  #growth rate
POT_S_max = 3, #3.5 m
POT_R_max = 0.15, #0.15 m
#housing
alphahp = 15,
mewhp =0.1,
UPmax =1,
HPmax =1
){
#Initialize vectors
POT = rep(0,length(W))          #Peak over Threshold
POT_S = max(W) - Surgethreshold
POT_R = max(Precip) - Rainthreshold
L = rep(0,length(W))            #L - loss
D = rep(0.1 * Dmax,length(W))     #D - population density
R = rep(0,length(W))            #R - relative loss
U = rep(U_rate,length(W))       #U - growth rate of settlement density
A = rep(0.2*Amax,length(W))     #A - awareness
P = rep(0.1*Pmax,length(W))     #P - preparedness
dDdt = rep(0,length(W))
dPdt = rep(0,length(W))
dAdt = rep(0,length(W))
#housing
UP = rep(0.5 * UPmax,length(W))
HP = rep(0.5 * HPmax,length(W))
dUPdt = rep(0,length(W))
dHPdt = rep(0,length(W))
tflood = 10
for (t in 1:length(W))
{
POT_S[t] = max(0,1*W[t] - Surgethreshold)
POT_R[t] = max(0,1*Precip[t] - Rainthreshold)
}
POT_S_Scaled = POT_S/POT_S_max
POT_R_Scaled = POT_R/POT_R_max
for (t in 1:length(W))
{
POT[t] = max(POT_S_Scaled[t],POT_R_Scaled[t])
}
#sociohydro loop
for (t in 2:length(W))
{
#Relative loss
if( POT[t] > 0)
{R[t] = max(0,Rmax - Br*exp(-alphar*(Pmax - P[t-1])*POT[t]))}
else
{R[t] = 0}
L[t] = R[t] * D[t-1] * UP[t-1] #housing
dDdt[t] = U[t]*(1 - alphad*A[t-1])*D[t-1]*(1 - D[t-1]/Dmax)
dAdt[t] = alphaa*L[t]*(1 - A[t-1]/Amax) - mewa*A[t-1]
if (R[t] > 0)
{dPdt[t] = alphap*dAdt[t]*(1 - P[t-1]/Pmax) - mewp*P[t-1]
tflood = 0}
else
{dPdt[t] = -1*mewp*P[t-1]}
#housing
dUPdt[t] = HP[t]*(1 - UP[t-1]/UPmax)
if (R[t] > 0)
{HP[t] = HPmax/(HPmax + exp(-phi*(tflood-6)))}
#{dHPdt[t] = mewhp * HP[t-1] - alphahp * L[t] * (1 - HP[t-1]/HPmax)}
else
{
#dHPdt[t] = mewhp * HP[t-1]
HP[t] = HP[t-1] - alphahp*L[t]*(1 - HP[t]/HPmax)
}
tflood = tflood + 1
D[t] = max(0,min(D[t-1] + dDdt[t],Dmax))
A[t] = max(0,min(A[t-1] + dAdt[t],Amax))
P[t] = max(0,min(P[t-1] + dPdt[t],Pmax))
#housing
UP[t] = max(0,min(UP[t-1] + dUPdt[t],UPmax))
#HP[t] = max(0,min(HP[t-1] + dHPdt[t],HPmax))
}
SocHydResults<-data.frame(W,L,D,R,U,A,P,UP,HP)  #housing
return(SocHydResults)
}
#Socio-hydrological model test
Results = SocHydModel_SurgePrecip(W = Battery$Max_Wl_Battery, Precip = precip$precip_max,
2, 0.12, 6, 13, 9, 0.03,	0.012, 0.001,	0.01,
1, 1, 1, 1, 0.5 ,0.14, 0.1, 13, 0.012 , 1, 1)
setwd("C:/SANDEEP/SocioHydro_Model/Data")
Battery = read.csv("Max_Water_Level_Battery.csv")
precip = read.table("Max_precip_LIS.csv")
SocHydModel_SurgePrecip <- function(
W,             #annual maxima discharge
Precip,        #annual maxima rainfall
Surgethreshold = 2,      #flooding threshold (storm surge)
Rainthreshold = 0.1, #flooding threshold (precipitation)
alphad = 1,    #risk taking attitude
alphaa = 15,   #anxiousness
alphap = 1,    #activeness
alphar = 0.25, #effectiveness of preparedness
Br = 1,        #flood to loss
mewa = 0.10,   #forgetfullness
mewp = 0.04,   #decay rate of precautionary measures
Dmax = 1.0,    #maximum settlement density
Pmax = 1.0,    #maximum preparedness
Rmax = 1.0,    #maximum relative loss
Amax = 1.0,    #maximum awareness
U_rate = 0.5,  #growth rate
POT_S_max = 3, #3.5 m
POT_R_max = 0.15, #0.15 m
phi = 1
#housing
alphahp = 15,
setwd("C:/SANDEEP/SocioHydro_Model/Data")
Battery = read.csv("Max_Water_Level_Battery.csv")
precip = read.table("Max_precip_LIS.csv")
SocHydModel_SurgePrecip <- function(
W,             #annual maxima discharge
Precip,        #annual maxima rainfall
Surgethreshold = 2,      #flooding threshold (storm surge)
Rainthreshold = 0.1, #flooding threshold (precipitation)
alphad = 1,    #risk taking attitude
alphaa = 15,   #anxiousness
alphap = 1,    #activeness
alphar = 0.25, #effectiveness of preparedness
Br = 1,        #flood to loss
mewa = 0.10,   #forgetfullness
mewp = 0.04,   #decay rate of precautionary measures
Dmax = 1.0,    #maximum settlement density
Pmax = 1.0,    #maximum preparedness
Rmax = 1.0,    #maximum relative loss
Amax = 1.0,    #maximum awareness
U_rate = 0.5,  #growth rate
POT_S_max = 3, #3.5 m
POT_R_max = 0.15, #0.15 m
phi = 1,
#housing
alphahp = 15,
mewhp =0.1,
UPmax =1,
HPmax =1
){
#Initialize vectors
POT = rep(0,length(W))          #Peak over Threshold
POT_S = max(W) - Surgethreshold
POT_R = max(Precip) - Rainthreshold
L = rep(0,length(W))            #L - loss
D = rep(0.1 * Dmax,length(W))     #D - population density
R = rep(0,length(W))            #R - relative loss
U = rep(U_rate,length(W))       #U - growth rate of settlement density
A = rep(0.2*Amax,length(W))     #A - awareness
P = rep(0.1*Pmax,length(W))     #P - preparedness
dDdt = rep(0,length(W))
dPdt = rep(0,length(W))
dAdt = rep(0,length(W))
#housing
#UP = rep(0.5 * UPmax,length(W))
HP = rep(0.5 * HPmax,length(W))
dUPdt = rep(0,length(W))
dHPdt = rep(0,length(W))
tflood = 10
for (t in 1:length(W))
{
POT_S[t] = max(0,1*W[t] - Surgethreshold)
POT_R[t] = max(0,1*Precip[t] - Rainthreshold)
}
POT_S_Scaled = POT_S/POT_S_max
POT_R_Scaled = POT_R/POT_R_max
for (t in 1:length(W))
{
POT[t] = max(POT_S_Scaled[t],POT_R_Scaled[t])
}
#sociohydro loop
for (t in 2:length(W))
{
#Relative loss
if( POT[t] > 0)
{R[t] = max(0,Rmax - Br*exp(-alphar*(Pmax - P[t-1])*POT[t]))}
else
{R[t] = 0}
L[t] = R[t] * D[t-1] * HP[t-1] #housing
dDdt[t] = U[t]*(1 - alphad*A[t-1])*D[t-1]*(1 - D[t-1]/Dmax)
dAdt[t] = alphaa*L[t]*(1 - A[t-1]/Amax) - mewa*A[t-1]
if (R[t] > 0)
{dPdt[t] = alphap*dAdt[t]*(1 - P[t-1]/Pmax) - mewp*P[t-1]
tflood = 0}
else
{dPdt[t] = -1*mewp*P[t-1]}
#housing
#dUPdt[t] = HP[t]*(1 - UP[t-1]/UPmax)
if (R[t] > 0)
{HP[t] = HPmax/(HPmax + exp(-phi*(tflood-6)))}
#{dHPdt[t] = mewhp * HP[t-1] - alphahp * L[t] * (1 - HP[t-1]/HPmax)}
else
{
#dHPdt[t] = mewhp * HP[t-1]
HP[t] = HP[t-1] - alphahp*L[t]*(1 - HP[t]/HPmax)
}
tflood = tflood + 1
D[t] = max(0,min(D[t-1] + dDdt[t],Dmax))
A[t] = max(0,min(A[t-1] + dAdt[t],Amax))
P[t] = max(0,min(P[t-1] + dPdt[t],Pmax))
#housing
UP[t] = max(0,min(UP[t-1] + dUPdt[t],UPmax))
#HP[t] = max(0,min(HP[t-1] + dHPdt[t],HPmax))
}
SocHydResults<-data.frame(W,L,D,R,U,A,P,UP,HP)  #housing
return(SocHydResults)
}
#Socio-hydrological model test
Results = SocHydModel_SurgePrecip(W = Battery$Max_Wl_Battery, Precip = precip$precip_max,
2, 0.12, 6, 13, 9, 0.03,	0.012, 0.001,	0.01,
1, 1, 1, 1, 0.5 ,0.14, 0.1, 13, 0.012 , 1, 1)
setwd("C:/SANDEEP/SocioHydro_Model/Data")
Battery = read.csv("Max_Water_Level_Battery.csv")
precip = read.table("Max_precip_LIS.csv")
SocHydModel_SurgePrecip <- function(
W,             #annual maxima discharge
Precip,        #annual maxima rainfall
Surgethreshold = 2,      #flooding threshold (storm surge)
Rainthreshold = 0.1, #flooding threshold (precipitation)
alphad = 1,    #risk taking attitude
alphaa = 15,   #anxiousness
alphap = 1,    #activeness
alphar = 0.25, #effectiveness of preparedness
Br = 1,        #flood to loss
mewa = 0.10,   #forgetfullness
mewp = 0.04,   #decay rate of precautionary measures
Dmax = 1.0,    #maximum settlement density
Pmax = 1.0,    #maximum preparedness
Rmax = 1.0,    #maximum relative loss
Amax = 1.0,    #maximum awareness
U_rate = 0.5,  #growth rate
POT_S_max = 3, #3.5 m
POT_R_max = 0.15, #0.15 m
phi = 1,
#housing
alphahp = 15,
mewhp =0.1,
UPmax =1,
HPmax =1
){
#Initialize vectors
POT = rep(0,length(W))          #Peak over Threshold
POT_S = max(W) - Surgethreshold
POT_R = max(Precip) - Rainthreshold
L = rep(0,length(W))            #L - loss
D = rep(0.1 * Dmax,length(W))     #D - population density
R = rep(0,length(W))            #R - relative loss
U = rep(U_rate,length(W))       #U - growth rate of settlement density
A = rep(0.2*Amax,length(W))     #A - awareness
P = rep(0.1*Pmax,length(W))     #P - preparedness
dDdt = rep(0,length(W))
dPdt = rep(0,length(W))
dAdt = rep(0,length(W))
#housing
#UP = rep(0.5 * UPmax,length(W))
HP = rep(0.5 * HPmax,length(W))
#dUPdt = rep(0,length(W))
dHPdt = rep(0,length(W))
tflood = 10
for (t in 1:length(W))
{
POT_S[t] = max(0,1*W[t] - Surgethreshold)
POT_R[t] = max(0,1*Precip[t] - Rainthreshold)
}
POT_S_Scaled = POT_S/POT_S_max
POT_R_Scaled = POT_R/POT_R_max
for (t in 1:length(W))
{
POT[t] = max(POT_S_Scaled[t],POT_R_Scaled[t])
}
#sociohydro loop
for (t in 2:length(W))
{
#Relative loss
if( POT[t] > 0)
{R[t] = max(0,Rmax - Br*exp(-alphar*(Pmax - P[t-1])*POT[t]))}
else
{R[t] = 0}
L[t] = R[t] * D[t-1] * HP[t-1] #housing
dDdt[t] = U[t]*(1 - alphad*A[t-1])*D[t-1]*(1 - D[t-1]/Dmax)
dAdt[t] = alphaa*L[t]*(1 - A[t-1]/Amax) - mewa*A[t-1]
if (R[t] > 0)
{dPdt[t] = alphap*dAdt[t]*(1 - P[t-1]/Pmax) - mewp*P[t-1]
tflood = 0}
else
{dPdt[t] = -1*mewp*P[t-1]}
#housing
#dUPdt[t] = HP[t]*(1 - UP[t-1]/UPmax)
if (R[t] > 0)
{HP[t] = HPmax/(HPmax + exp(-phi*(tflood-6)))}
#{dHPdt[t] = mewhp * HP[t-1] - alphahp * L[t] * (1 - HP[t-1]/HPmax)}
else
{
#dHPdt[t] = mewhp * HP[t-1]
HP[t] = HP[t-1] - alphahp*L[t]*(1 - HP[t]/HPmax)
}
tflood = tflood + 1
D[t] = max(0,min(D[t-1] + dDdt[t],Dmax))
A[t] = max(0,min(A[t-1] + dAdt[t],Amax))
P[t] = max(0,min(P[t-1] + dPdt[t],Pmax))
#housing
#UP[t] = max(0,min(UP[t-1] + dUPdt[t],UPmax))
#HP[t] = max(0,min(HP[t-1] + dHPdt[t],HPmax))
}
SocHydResults<-data.frame(W,L,D,R,U,A,P,HP)  #housing
return(SocHydResults)
}
#Socio-hydrological model test
Results = SocHydModel_SurgePrecip(W = Battery$Max_Wl_Battery, Precip = precip$precip_max,
2, 0.12, 6, 13, 9, 0.03,	0.012, 0.001,	0.01,
1, 1, 1, 1, 0.5 ,0.14, 0.1, 13, 0.012 , 1)
#SH plot
##Plot
par(mfrow=c(4,2))
#storm surge
plot(Battery$Year  ,Battery$Max_Wl_Battery , type = "o")
#awareness
plot(Battery$Year  ,Results$A , type = "o")
#precipitation
plot(precip$yr  ,precip$precip_max , type = "o" )
#preparedness
plot(Battery$Year  ,Results$P, type = "o" )
#loss
plot(Battery$Year  ,Results$L, type = "o")
#density
plot(Battery$Year  ,Results$D, type = "o" )
#housing price
plot(Battery$Year  ,Results$HP, type = "o" )
#Unit price
plot(Battery$Year  ,Results$UP, type = "o" )
tflood
setwd("C:/SANDEEP/SocioHydro_Model/Data")
Battery = read.csv("Max_Water_Level_Battery.csv")
precip = read.table("Max_precip_LIS.csv")
SocHydModel_SurgePrecip <- function(
W,             #annual maxima discharge
Precip,        #annual maxima rainfall
Surgethreshold = 2,      #flooding threshold (storm surge)
Rainthreshold = 0.1, #flooding threshold (precipitation)
alphad = 1,    #risk taking attitude
alphaa = 15,   #anxiousness
alphap = 1,    #activeness
alphar = 0.25, #effectiveness of preparedness
Br = 1,        #flood to loss
mewa = 0.10,   #forgetfullness
mewp = 0.04,   #decay rate of precautionary measures
Dmax = 1.0,    #maximum settlement density
Pmax = 1.0,    #maximum preparedness
Rmax = 1.0,    #maximum relative loss
Amax = 1.0,    #maximum awareness
U_rate = 0.5,  #growth rate
POT_S_max = 3, #3.5 m
POT_R_max = 0.15, #0.15 m
phi = 1,
#housing
alphahp = 15,
mewhp =0.1,
UPmax =1,
HPmax =1
){
#Initialize vectors
POT = rep(0,length(W))          #Peak over Threshold
POT_S = max(W) - Surgethreshold
POT_R = max(Precip) - Rainthreshold
L = rep(0,length(W))            #L - loss
D = rep(0.1 * Dmax,length(W))     #D - population density
R = rep(0,length(W))            #R - relative loss
U = rep(U_rate,length(W))       #U - growth rate of settlement density
A = rep(0.2*Amax,length(W))     #A - awareness
P = rep(0.1*Pmax,length(W))     #P - preparedness
dDdt = rep(0,length(W))
dPdt = rep(0,length(W))
dAdt = rep(0,length(W))
#housing
#UP = rep(0.5 * UPmax,length(W))
HP = rep(0.5 * HPmax,length(W))
#dUPdt = rep(0,length(W))
dHPdt = rep(0,length(W))
tflood = 10
for (t in 1:length(W))
{
POT_S[t] = max(0,1*W[t] - Surgethreshold)
POT_R[t] = max(0,1*Precip[t] - Rainthreshold)
}
POT_S_Scaled = POT_S/POT_S_max
POT_R_Scaled = POT_R/POT_R_max
for (t in 1:length(W))
{
POT[t] = max(POT_S_Scaled[t],POT_R_Scaled[t])
}
#sociohydro loop
for (t in 2:length(W))
{
#Relative loss
if( POT[t] > 0)
{R[t] = max(0,Rmax - Br*exp(-alphar*(Pmax - P[t-1])*POT[t]))}
else
{R[t] = 0}
L[t] = R[t] * D[t-1] * HP[t-1] #housing
dDdt[t] = U[t]*(1 - alphad*A[t-1])*D[t-1]*(1 - D[t-1]/Dmax)
dAdt[t] = alphaa*L[t]*(1 - A[t-1]/Amax) - mewa*A[t-1]
if (R[t] > 0)
{dPdt[t] = alphap*dAdt[t]*(1 - P[t-1]/Pmax) - mewp*P[t-1]
tflood = 0}
else
{dPdt[t] = -1*mewp*P[t-1]}
#housing
#dUPdt[t] = HP[t]*(1 - UP[t-1]/UPmax)
if (R[t] > 0)
{HP[t] = HPmax/(HPmax + exp(-phi*(tflood-6)))}
#{dHPdt[t] = mewhp * HP[t-1] - alphahp * L[t] * (1 - HP[t-1]/HPmax)}
else
{
#dHPdt[t] = mewhp * HP[t-1]
HP[t] = HP[t-1] - alphahp*L[t]*(1 - HP[t]/HPmax)
}
tflood = tflood + 1
D[t] = max(0,min(D[t-1] + dDdt[t],Dmax))
A[t] = max(0,min(A[t-1] + dAdt[t],Amax))
P[t] = max(0,min(P[t-1] + dPdt[t],Pmax))
#housing
#UP[t] = max(0,min(UP[t-1] + dUPdt[t],UPmax))
#HP[t] = max(0,min(HP[t-1] + dHPdt[t],HPmax))
}
SocHydResults<-data.frame(W,L,D,R,U,A,P,HP)  #housing
return(SocHydResults)
}
#Socio-hydrological model test
Results = SocHydModel_SurgePrecip(W = Battery$Max_Wl_Battery, Precip = precip$precip_max,
2, 0.12, 6, 13, 9, 0.03,	0.012, 0.001,	0.01,
1, 1, 1, 1, 0.5 ,0.14, 0.1, 13, 0.012 , 1)
#SH plot
##Plot
par(mfrow=c(4,2))
#storm surge
plot(Battery$Year  ,Battery$Max_Wl_Battery , type = "o")
#awareness
plot(Battery$Year  ,Results$A , type = "o")
#precipitation
plot(precip$yr  ,precip$precip_max , type = "o" )
#preparedness
plot(Battery$Year  ,Results$P, type = "o" )
#loss
plot(Battery$Year  ,Results$L, type = "o")
#density
plot(Battery$Year  ,Results$D, type = "o" )
#housing price
plot(Battery$Year  ,Results$HP, type = "o" )
#Unit price
plot(Battery$Year  ,Results$UP, type = "o" )
View(Results)
